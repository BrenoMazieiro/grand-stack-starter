directive @hideTheField on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

type Phone {
  id: String!
  phone_country: String!
  phone_number: String!
  pincode: String! @hideTheField
  validated: Boolean
  user: User @relation(name: "WROTE", direction: "IN")
}

type User {
  id: String
  name: String!
  email: String!
  password: String! @hideTheField
  token: String
  roles: [Roles] @relation(name: "IS_A", direction: "OUT")
  phones: [Phone] @relation(name: "HAS_PHONE", direction: "OUT")
  friends: [User] @relation(name: "FRIENDS", direction: "BOTH")
  reviews: [Review] @relation(name: "WROTE", direction: "OUT")
  avgStars: Float
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
}
type Roles {
  type: String!
}

type Business {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Review {
  id: ID!
  stars: Int
  text: String
  date: Date
  business: Business @relation(name: "REVIEWS", direction: "OUT")
  user: User @relation(name: "WROTE", direction: "IN")
}

type Category {
  name: ID!
  businesses: [Business] @relation(name: "IN_CATEGORY", direction: "IN")
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u"
    )
}

type Mutation {
  CreateUser (
    searchUserInput: searchUserInput
    updateUserInput: updateUserInput
  ): User
    @cypher(
      statement: "MERGE (u:User {email: $searchUserInput.email}) ON CREATE SET u.id = apoc.create.uuid(), u.name = $updateUserInput.name, u.email = $updateUserInput.email, u.password = $updateUserInput.password ON MATCH SET u.name = $updateUserInput.name, u.password = $updateUserInput.password RETURN u"
    )
  MergeUser (
    searchUserInput: searchUserInput
    updateUserInput: updateUserInput
  ): User
    @cypher(
      statement: "MERGE (u:User {email: $searchUserInput.email}) ON CREATE SET u.id = apoc.create.uuid(), u.name = $updateUserInput.name, u.email = $updateUserInput.email, u.password = $updateUserInput.password ON MATCH SET u.name = $updateUserInput.name, u.password = $updateUserInput.password RETURN u"
    )
  CreatePhone(
    searchPhoneInput: searchPhoneInput
  ): Phone 
    @cypher(
      statement: "MERGE (p:Phone {phone_country: $searchPhoneInput.phone_country, phone_number: $searchPhoneInput.phone_number } ) ON CREATE SET  p.id = apoc.create.uuid(), p.phone_country = $searchPhoneInput.phone_country, p.phone_number = $searchPhoneInput.phone_number, p.pincode = apoc.text.random(5) ON MATCH SET p.pincode = apoc.text.random(5) RETURN p"
    )
}

input searchPhoneInput {
  phone_country: String!
  phone_number: String!
}

input searchUserInput {
  email: String!
}

input updateUserInput {
  name: String!
  email: String!
  password: String!
}
